<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<report>
    <reportName>Travel Report</reportName>
    <visible>true</visible>
    <metadata>
        <location>1585644682205</location>
        <metadataFileName>aec57aaf-a307-4940-9a93-8bf3bae4b1be.metadata</metadataFileName>
    </metadata>
    <canvas>
        <columns><![CDATA[[{"column":"travel_details.travel_cost","label":"travel_details_travel_cost","id":"4grho7231f6","type":{"dataType":"numeric","backendDatatype":"java.lang.Integer"},"autogen_alias":"sum_travel_cost","aggregate":["db.generic.aggregate.sum"],"alias":"Cost of Travel"},{"column":"travel_details.travel_date","label":"travel_details_travel_date","id":"p51oeyf0ej","type":{"dataType":"dateTime","backendDatatype":"java.sql.Timestamp"},"autogen_alias":"travel_details_travel_date","groupBy":["db.generic.groupBy.group"],"databaseFunction":{"key":"sql.dateTime.monthname","description":"Returns the month name based on the given date/datetime. Example: monthname('2014-08-08 08:00:00.000') result: August ","value":"MONTHNAME","signature":"(case when (month(${datetime})=01 OR month(${datetime})=1) then 'January' \n\t     when (month(${datetime})=02 OR month(${datetime})=2) then 'February'\n\t     when (month(${datetime})=03 OR month(${datetime})=3) then 'March'\n\t     when (month(${datetime})=04 OR month(${datetime})=4) then 'April'\n\t     when (month(${datetime})=05 OR month(${datetime})=5) then 'May'\n\t     when (month(${datetime})=06 OR month(${datetime})=6) then 'June'\n\t     when (month(${datetime})=07 OR month(${datetime})=7) then 'July'\n\t     when (month(${datetime})=08 OR month(${datetime})=8) then 'August'\n\t     when (month(${datetime})=09 OR month(${datetime})=9) then 'September'\n\t     when (month(${datetime})=10) then 'October'\n\t     when (month(${datetime})=11) then 'November'\n\t     when (month(${datetime})=12) then 'December'\n\t     else null end)","returns":"text","parameters":[{"name":"datetime","defaultValue":"'2014-08-08 08:00:00.000'","value":"travel_details.travel_date","column":true}]},"alias":"Month Name"},{"column":"travel_details.mode_of_payment","label":"travel_details_mode_of_payment","id":"r6z3mhhjyq9","type":{"dataType":"text","backendDatatype":"java.lang.String"},"autogen_alias":"travel_details_mode_of_payment","groupBy":["db.generic.groupBy.group"],"alias":"Mode of Payment"},{"column":"travel_details.travel_cost","label":"travel_details_travel_cost","id":"ceebvttb81d","type":{"dataType":"numeric","backendDatatype":"java.lang.Integer"},"autogen_alias":"count_travel_cost","aggregate":["db.generic.aggregate.count"],"alias":"No of Travel"}]]]></columns>
    </canvas>
    <state><![CDATA[{"columns":[{"column":"travel_details.travel_cost","label":"travel_details_travel_cost","id":"4grho7231f6","type":{"dataType":"numeric","backendDatatype":"java.lang.Integer"},"autogen_alias":"sum_travel_cost","aggregate":["db.generic.aggregate.sum"],"alias":"Cost of Travel"},{"column":"travel_details.travel_date","label":"travel_details_travel_date","id":"p51oeyf0ej","type":{"dataType":"dateTime","backendDatatype":"java.sql.Timestamp"},"autogen_alias":"travel_details_travel_date","groupBy":["db.generic.groupBy.group"],"databaseFunction":{"key":"sql.dateTime.monthname","description":"Returns the month name based on the given date/datetime. Example: monthname('2014-08-08 08:00:00.000') result: August ","value":"MONTHNAME","signature":"(case when (month(${datetime})=01 OR month(${datetime})=1) then 'January' \n\t     when (month(${datetime})=02 OR month(${datetime})=2) then 'February'\n\t     when (month(${datetime})=03 OR month(${datetime})=3) then 'March'\n\t     when (month(${datetime})=04 OR month(${datetime})=4) then 'April'\n\t     when (month(${datetime})=05 OR month(${datetime})=5) then 'May'\n\t     when (month(${datetime})=06 OR month(${datetime})=6) then 'June'\n\t     when (month(${datetime})=07 OR month(${datetime})=7) then 'July'\n\t     when (month(${datetime})=08 OR month(${datetime})=8) then 'August'\n\t     when (month(${datetime})=09 OR month(${datetime})=9) then 'September'\n\t     when (month(${datetime})=10) then 'October'\n\t     when (month(${datetime})=11) then 'November'\n\t     when (month(${datetime})=12) then 'December'\n\t     else null end)","returns":"text","parameters":[{"name":"datetime","defaultValue":"'2014-08-08 08:00:00.000'","value":"travel_details.travel_date","column":true}]},"alias":"Month Name"},{"column":"travel_details.mode_of_payment","label":"travel_details_mode_of_payment","id":"r6z3mhhjyq9","type":{"dataType":"text","backendDatatype":"java.lang.String"},"autogen_alias":"travel_details_mode_of_payment","groupBy":["db.generic.groupBy.group"],"alias":"Mode of Payment"},{"column":"travel_details.travel_cost","label":"travel_details_travel_cost","id":"ceebvttb81d","type":{"dataType":"numeric","backendDatatype":"java.lang.Integer"},"autogen_alias":"count_travel_cost","aggregate":["db.generic.aggregate.count"],"alias":"No of Travel"}],"filters":[{"values":["Agent"],"mode":"auto","dataType":"text","valuesMode":"auto","isFilterEditable":false,"encloseInQuotes":false,"dateTimeToggle":false,"label":"travel_details_booking_platform","column":"travel_details.booking_platform","backendDataType":"java.lang.String","id":0,"condition":"EQUALS","valuesRange":{},"rangeSelectionToggole":true}],"customFilterExpression":"${0}","customHavingExpression":"","customFilterExpressionObj":{"0":"${0}"},"customHavingExpressionObj":{},"havingExpressionIndexs":{},"filterExpressionIndexs":{},"options":{"limitBy":"5","prependTableNameToAlias":true},"visualisation":{"type":"Table","chartGroup":["Card"],"selectedType":"Table","settings":{"script":null,"vizscriptsEditMultipleMode":false,"type":"HIWidget","vizType":"Charts","chartGroup":["Card"],"crossTabRows":[{"column":"travel_details.mode_of_payment","label":"travel_details_mode_of_payment","id":"r6z3mhhjyq9","type":{"dataType":"text","backendDatatype":"java.lang.String"},"autogen_alias":"travel_details_mode_of_payment","groupBy":["db.generic.groupBy.group"],"alias":"Mode of Payment"}],"crossTabCols":[{"column":"travel_details.travel_date","label":"travel_details_travel_date","id":"p51oeyf0ej","type":{"dataType":"dateTime","backendDatatype":"java.sql.Timestamp"},"autogen_alias":"travel_details_travel_date","groupBy":["db.generic.groupBy.group"],"databaseFunction":{"key":"sql.dateTime.monthname","description":"Returns the month name based on the given date/datetime. Example: monthname('2014-08-08 08:00:00.000') result: August ","value":"MONTHNAME","signature":"(case when (month(${datetime})=01 OR month(${datetime})=1) then 'January' \n\t     when (month(${datetime})=02 OR month(${datetime})=2) then 'February'\n\t     when (month(${datetime})=03 OR month(${datetime})=3) then 'March'\n\t     when (month(${datetime})=04 OR month(${datetime})=4) then 'April'\n\t     when (month(${datetime})=05 OR month(${datetime})=5) then 'May'\n\t     when (month(${datetime})=06 OR month(${datetime})=6) then 'June'\n\t     when (month(${datetime})=07 OR month(${datetime})=7) then 'July'\n\t     when (month(${datetime})=08 OR month(${datetime})=8) then 'August'\n\t     when (month(${datetime})=09 OR month(${datetime})=9) then 'September'\n\t     when (month(${datetime})=10) then 'October'\n\t     when (month(${datetime})=11) then 'November'\n\t     when (month(${datetime})=12) then 'December'\n\t     else null end)","returns":"text","parameters":[{"name":"datetime","defaultValue":"'2014-08-08 08:00:00.000'","value":"travel_details.travel_date","column":true}]},"alias":"Month Name"}],"crossTabVals":[{"column":"travel_details.travel_cost","label":"travel_details_travel_cost","id":"4grho7231f6","type":{"dataType":"numeric","backendDatatype":"java.lang.Integer"},"autogen_alias":"sum_travel_cost","aggregate":["db.generic.aggregate.sum"],"alias":"Cost of Travel"},{"column":"travel_details.travel_cost","label":"travel_details_travel_cost","id":"ceebvttb81d","type":{"dataType":"numeric","backendDatatype":"java.lang.Integer"},"autogen_alias":"count_travel_cost","aggregate":["db.generic.aggregate.count"],"alias":"No of Travel"}]},"vizSelectedScripts":[{"name":"Table Format","scriptId":"table_js_Table-Format","scriptType":"js","group":"Table","parameters":{"columnNames":["Cost of Travel","Month Name","Mode of Payment","No of Travel"],"basicProperties":["#ffffff","#000000","#ffffff","#70ad47","11","Arial"],"PreffixValue":["","","",""],"SuffixValue":["","","",""],"DateTimeFormatFlag":["false","false","false","false"],"OriginalFormatValue":["","","",""],"ModifiedFormatValue":["","","",""],"FontSizeValue":["11","11","11","11"],"FontFamilyValue":["Arial","Arial","Arial","Arial"],"TextColorValue":["Black","Black","Black","Black"],"NullValue":["NULL","NULL","NULL","NULL"],"TextAlignValue":["right","left","left","right"],"BoldValue":["normal","normal","normal","normal"],"ItalicValue":["normal","normal","normal","normal"],"UnderlineValue":["normal","normal","normal","normal"],"BackgroundColorValue":{"background":[{"column":"Cost of Travel","max_val":1035306,"value":321442,"color":"","image":"","databar":""},{"column":"Month Name","max_val":"","value":0,"color":"","image":"","databar":""},{"column":"Mode of Payment","max_val":"","value":0,"color":"","image":"","databar":""},{"column":"No of Travel","max_val":47,"value":21,"color":"","image":"","databar":""}]},"ThousandSeparatorFlag":["false","false","false","false"],"switch1":"false","flag1":"true","TableStyleNo":"FirstRow_1"},"renderOn":"simpleModel","isEditable":true,"description":"Table formatting functionalities","icon":"/images/scriptIcons/TableFormat.png","isSelected":true,"isActiveScript":"active","isCheckedForMultipleEdit":false,"snippet":"\n\t\t\n\t\t\n\t\t\tvar id = hi_container.get(\"renderId\");\n\t\t\t\n\t\t\tvar containerId = \"#main\";\n\n\t\t\tif(id != \"\")\n\t\t\t\tcontainerId = containerId+'-'+id;\n\t\t\t\n\t\t\tvar tableName = containerId+' .table';\n\t\t\tvar thTable = containerId+' .table thead th>a>span';\n\t\t\tvar tdTable = containerId+' .table tbody tr>td';\n\t\t\tvar thead = containerId+' .table thead';\n\t\t\tvar tbody = containerId+' .table tbody';\n\t\t\tvar tableViz = containerId+' .table-viz';\n\t\t\tvar tableThead = containerId+' .table thead th';\n\t\t\tvar tableTbody = containerId+' .table tbody tr';\n\t\t\tvar tbodyEven = containerId+' .table tbody tr td:nth-child(even)';\n\t\t\tvar tbodyOdd = containerId+' .table tbody tr td:nth-child(odd)';\n\t\t\tvar theadEven = containerId+' .table thead tr th:nth-child(even)';\n\t\t\tvar theadEvenSpan = containerId+' .table thead tr th:nth-child(even)>a>span';\n\t\t\tvar theadOdd = containerId+' .table thead tr th:nth-child(odd)';\n\t\t\tvar theadOddSpan = containerId+' .table thead tr th:nth-child(odd)>a>span';\n\t\t\t\n\t\t\tvar ftnObj = {};\n\t\t\t\n\t\t\tftnObj['RenderTableFormat'+id]= function(){\n\t\t\t\n\t\t\t\t//loading d3.js thousand separator and date time formatting\n\t\t\t\tvar script1 = document.createElement(\"script\"),\n\t\t\t\t\t\tscript1loaded = false;\n\t\t\t\t\t\t\n\t\t\t\tif(window.DashboardGlobals)\n\t\t\t\t\tscript1.src= window.DashboardGlobals.baseUrl+\"/js/vendors/d3.js\";\n\t\t\t\telse\n\t\t\t\t\tscript1.src= \"/js/vendors/d3.js\"; \n\t\t\t\t   \n\t\t\t\tscript1.async = true;\n\n\t\t\t\tdocument.getElementsByTagName(\"head\")[0].appendChild(script1);\n\n\t\t\t\tscript1.onload = function() {\n\t\t\t\t\tvar table = document.querySelectorAll(tableViz);\n\t\t\t\t\t[].forEach.call(table, NumberFormat);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfunction NumberFormat(table) {\n\t\t\t\t//Taking all parameters in variables\n\t\t\t\tvar column_index=[],\n\t\t\t\t\tcolumn_name=[\"Cost of Travel\",\"Month Name\",\"Mode of Payment\",\"No of Travel\"],\n\t\t\t\t\ttableStyleNo='FirstRow_1',\n\t\t\t\t\tbasicProperties=[\"#ffffff\",\"#000000\",\"#ffffff\",\"#70ad47\",\"11\",\"Arial\"],\n\t\t\t\t\tswitch1=false,\n\t\t\t\t\tfontSizeValue=[\"11\",\"11\",\"11\",\"11\"],\n\t\t\t\t\tfontFamilyValue=[\"Arial\",\"Arial\",\"Arial\",\"Arial\"],\n\t\t\t\t\ttextColorValue=[\"Black\",\"Black\",\"Black\",\"Black\"],\n\t\t\t\t\tbackgroundColorValue={\"background\":[{\"column\":\"Cost of Travel\",\"max_val\":1035306,\"value\":321442,\"color\":\"\",\"image\":\"\",\"databar\":\"\"},{\"column\":\"Month Name\",\"max_val\":\"\",\"value\":0,\"color\":\"\",\"image\":\"\",\"databar\":\"\"},{\"column\":\"Mode of Payment\",\"max_val\":\"\",\"value\":0,\"color\":\"\",\"image\":\"\",\"databar\":\"\"},{\"column\":\"No of Travel\",\"max_val\":47,\"value\":21,\"color\":\"\",\"image\":\"\",\"databar\":\"\"}]},\n\t\t\t\t\tboldValue=[\"normal\",\"normal\",\"normal\",\"normal\"],\n\t\t\t\t\titalicValue=[\"normal\",\"normal\",\"normal\",\"normal\"],\n\t\t\t\t\tunderlineValue=[\"normal\",\"normal\",\"normal\",\"normal\"],\n\t\t\t\t\ttextAlignValue=[\"right\",\"left\",\"left\",\"right\"],\n\t\t\t\t\tPreffixes=[\"\",\"\",\"\",\"\"],\n\t\t\t\t\tSuffixes=[\"\",\"\",\"\",\"\"],\n\t\t\t\t\tthousandSeparatorFlag=[\"false\",\"false\",\"false\",\"false\"],\n\t\t\t\t\tnullValue=[\"NULL\",\"NULL\",\"NULL\",\"NULL\"],\n\t\t\t\t\tdateTimeFormatFlag=[\"false\",\"false\",\"false\",\"false\"],\n\t\t\t\t\toriginalFormatValue=[\"\",\"\",\"\",\"\"],\n\t\t\t\t\tmodifiedFormatValue=[\"\",\"\",\"\",\"\"];\n\t\t\t\t//var defaultFormatValue=\"%Y,%m,%d,%H,%M,%S,%L\";\t\t\n\n\t\t\t\t//Applying table layout properties to table according to the layout selected\n\t\t\t\t$(tableName).removeClass('table-striped');\n\t\t\t\t\n\t\t\t\tif(!false){\n\t\t\t\t\t$(thTable).css({\"font-size\":basicProperties[4]+'px',\"font-family\":basicProperties[5]});\n\t\t\t\t\t$(tableThead).css({\"font-size\":basicProperties[4]+'px',\"font-family\":basicProperties[5]});\n\t\t\t\t\t$(tdTable).css({\"font-size\":basicProperties[4]+'px',\"font-family\":basicProperties[5]});\n\t\t\t\t\tsetBasicColors();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//$(tableName).css({\"font-size\":basicProperties[4],\"font-family\":basicProperties[5]});\n\t\t\t\t\n\t\t\t\tfunction setBasicColors(){\n\t\t\t\t\tvar tableStyle=tableStyleNo.split(\"_\")[0];\n\t\t\t\t\tif(tableStyle==\"Default\" || tableStyle==\"TableStyle0\") {\n\t\t\t\t\t\t$(thTable).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t$(tableThead).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t$(thead).css(\"background-color\",basicProperties[1]);\n\t\t\t\t\t\t$(tdTable).css({\"color\":basicProperties[2]});\n\t\t\t\t\t\t$(tbody).css(\"background-color\", basicProperties[3]);\n\t\t\t\t\t} else if(tableStyle==\"FirstRow\") {\n\t\t\t\t\t\t$(thTable).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t$(tableThead).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t$(thead).css(\"background-color\",basicProperties[1]);\n\t\t\t\t\t\t$(tdTable).css({\"color\":basicProperties[2]});\n\t\t\t\t\t\t$(tbody).css(\"background-color\", basicProperties[3]);\n\n\t\t\t\t\t\t$(tableThead).hover(function(){\n\t\t\t\t\t\t\t\tvar cells=$(this).context.childNodes[0].childNodes[0];\n\t\t\t\t\t\t\t\t$(cells).css({\"color\":\"#000000\"});\n\t\t\t\t\t\t\t}, function(){\n\t\t\t\t\t\t\t\tvar cells=$(this).context.childNodes[0].childNodes[0];\n\t\t\t\t\t\t\t\t$(cells).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t$(tableTbody).hover(function(){\n\t\t\t\t\t\t\t\tvar cells=$(this).context.childNodes;\n\t\t\t\t\t\t\t\t$(cells).css({\"color\":\"#000000\"});\n\t\t\t\t\t\t\t}, function(){\n\t\t\t\t\t\t\t\tvar cells=$(this).context.childNodes;\n\t\t\t\t\t\t\t\t$(cells).css({\"color\":basicProperties[2]});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else if(tableStyle==\"FirstColumn\") {\n\t\t\t\t\t\t$(thead+' tr th:not(:nth-child(1))>a>span').css({\"color\":basicProperties[2]});\n\t\t\t\t\t\t$(thead+' tr th:not(:nth-child(1))').css({\"background-color\":basicProperties[3]});\n\t\t\t\t\t\t$(tbody+' tr td:not(:nth-child(1))').css({\"background-color\":basicProperties[3],\"color\":basicProperties[2]});\n\t\t\t\t\t\t$(thead+' tr th:nth-child(1)>a>span').css({color:basicProperties[0]});\n\t\t\t\t\t\t$(thead+' tr th:nth-child(1)').css({'background':basicProperties[1]});\n\t\t\t\t\t\t$(tbody+' tr td:nth-child(1)').css({'background': basicProperties[1],\"color\":basicProperties[0]});\n\t\t\t\t\t} else if(tableStyle==\"BandedColumn\") {\n\t\t\t\t\t\t$(theadEvenSpan).css({color:basicProperties[0]});\n\t\t\t\t\t\t$(theadEven).css({color:basicProperties[0]});\n\t\t\t\t\t\t$(theadOddSpan).css({color:basicProperties[2]});\n\t\t\t\t\t\t$(theadOdd).css({color:basicProperties[2]});\n\t\t\t\t\t\t$(theadEven).css({'background': basicProperties[1]});\n\t\t\t\t\t\t$(theadOdd).css({'background': basicProperties[3]});\n\t\t\t\t\t\t$(tbodyEven).css({color:basicProperties[0],'background': basicProperties[1]});\n\t\t\t\t\t\t$(tbodyOdd).css({color:basicProperties[2],'background': basicProperties[3]});\n\t\t\t\t\t} else if(tableStyle==\"FirstRowFirstColumn\") {\n\t\t\t\t\t\t$(thTable).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t$(tableThead).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t$(thead).css(\"background-color\",basicProperties[1]);\n\t\t\t\t\t\t$(tbody+' tr td:not(:nth-child(1))').css({\"background-color\":basicProperties[3],\"color\":basicProperties[2]});\n\t\t\t\t\t\t$(tbody+' tr td:nth-child(1)').css({'background': basicProperties[1],\"color\":basicProperties[0]});\n\t\t\t\t\t\t\n\t\t\t\t\t\t$(tableThead).hover(function(){\n\t\t\t\t\t\t\tvar cells=$(this).context.childNodes[0].childNodes[0];\n\t\t\t\t\t\t\t$(cells).css({\"color\":\"#000000\"});\n\t\t\t\t\t\t}, function(){\n\t\t\t\t\t\t\tvar cells=$(this).context.childNodes[0].childNodes[0];\n\t\t\t\t\t\t\t$(cells).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/**************************End of basic**************************************/\n\t\t\t\t\n\t\t\t\tsetBasicColors();\n\t\t\t\t\n\t\t\t\t$(thTable).css({\"margin-right\":\"0px\"});\n\t\t\t\t\t\n\t\t\t\t//Now accessing each cell of the table to apply the properties to each cell indvidually\t\n\t\t\t\t[].forEach.call(table.rows, function(row, i){\n\t\t\t\t\t//Collecting the column indexes of each column in the table\n\t\t\t\t\tjQuery.each(row.cells, function() {\n\t\t\t\t\t\tfor(var j=0;j<column_name.length;j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(i == 0 && this.textContent == column_name[j])\n\t\t\t\t\t\t\t\tcolumn_index.push(this.cellIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t//Accessing each cell and giving it the alignment property, which is compulsory\n\t\t\t\t\tfor(k=0;k<column_index.length;k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = row.cells[column_index[k]];\n\t\t\t\t\t\tif(cell.nodeName != 'TH')\n\t\t\t\t\t\t\t$(cell).css({\"text-align\":textAlignValue[k]});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Now check if the cell is not one of the header cells of the table\n\t\t\t\t\tif(i != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t//For each column, apply the properties\n\t\t\t\t\t\tfor(k=0;k<column_index.length;k++)\n\t\t\t\t\t\t{\t\t\n\t\t\t\t\t\t\t//If the preffix or suffix array contains dollar, then replace it by '$' symbol as the symbol is not working in the parameters\n\t\t\t\t\t\t\tif(Preffixes[k]==\"Dollar\")\t\t\t\t//Advanced Number Formatting\n\t\t\t\t\t\t\t\tPreffixes[k]=\"$\";\n\t\t\t\t\t\t\tif(Suffixes[k]==\"Dollar\")\n\t\t\t\t\t\t\t\tSuffixes[k]=\"$\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Code for accessing each cell\n\t\t\t\t\t\t\tvar cell = row.cells[column_index[k]];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Getting the original content of the cell (as it may change afterwards)\n\t\t\t\t\t\t\tvar cellContent=parseInt(cell.textContent);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//If thousand flag is enabled for a particulat column, then only apply thousand separator for that column\n\t\t\t\t\t\t\tif(thousandSeparatorFlag[k]==\"true\"){\n\t\t\t\t\t\t\t\tvar cellText=cellContent;\n\t\t\t\t\t\t\t\tcell.textContent=d3.format(\",\")(cellText);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Apply preffix and suffix\n\t\t\t\t\t\t\tvar number=cell.textContent;\n\t\t\t\t\t\t\tcell.innerHTML=Preffixes[k]+number+Suffixes[k];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Handle the null values in the table\n\t\t\t\t\t\t\tif(cellContent==\"Null\" || cellContent==\"null\")\n\t\t\t\t\t\t\t\tcell.textContent=nullValue[k];\n\t\t\t\t\n\t\t\t\t\t\t\t//Apply the basic properties to the cells, as enabled by user\n\t\t\t\t\t\t\t$(cell).css({\"font-size\":fontSizeValue[k]+'px',\"font-weight\":boldValue[k],\"font-style\":italicValue[k],\"text-decoration\":underlineValue[k],\"font-family\":fontFamilyValue[k]});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//get the values of different comparison parameters in variables\n\t\t\t\t\t\t\tvar Val=backgroundColorValue.background[k].value;\n\t\t\t\t\t\t\tvar Clr=backgroundColorValue.background[k].color;\n\t\t\t\t\t\t\tvar Img=backgroundColorValue.background[k].image;\n\t\t\t\t\t\t\tvar Max=backgroundColorValue.background[k].max_val;\n\t\t\t\t\t\t\tvar BarClr=backgroundColorValue.background[k].databar;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//calculate the percentage for the purpose of applying databars\n\t\t\t\t\t\t\tvar percent=(cellContent*100)/Max;\n\t\t\t\t\t\t\tvar rem_per=100-percent;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//As the databars and background-color have same style to be accessed i.e. \"background\", adjusted both databars and background-color\n\t\t\t\t\t\t\tif(Clr!=\"\" && BarClr==\"\")\n\t\t\t\t\t\t\t\tBarClr=Clr;\n\t\t\t\t\t\t\telse if(Clr==\"\" && BarClr!=\"\")\n\t\t\t\t\t\t\t\tClr=\"transparent-transparent-transparent\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar colors_split=BarClr.split(\"-\");\n\t\t\t\t\t\t\tvar Clr_split=Clr.split(\"-\");\n\t\t\t\t\t\t\tvar str=\"\"+Val+\"\";\n\t\t\t\t\t\t\t//if value specifed by user is a range, then this code\n\t\t\t\t\t\t\tif(str.indexOf(\"-\")!=\"-1\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar Val_split=str.split(\"-\");\n\t\t\t\t\t\t\t\tif(cellContent<Val_split[0])\n\t\t\t\t\t\t\t\t\t$(cell).css({\"background\":\" -webkit-linear-gradient(left, \"+colors_split[0]+\" \"+percent+\"%, \"+Clr_split[0]+\" \"+rem_per+\"%)\"});\n\t\t\t\t\t\t\t\telse if(cellContent>=Val_split[0] && cellContent<=Val_split[1])\n\t\t\t\t\t\t\t\t\t$(cell).css({\"background\":\" -webkit-linear-gradient(left, \"+colors_split[1]+\" \"+percent+\"%, \"+Clr_split[1]+\" \"+rem_per+\"%)\"});\n\t\t\t\t\t\t\t\telse if(cellContent>Val_split[1])\n\t\t\t\t\t\t\t\t\t$(cell).css({\"background\":\" -webkit-linear-gradient(left, \"+colors_split[2]+\" \"+percent+\"%, \"+Clr_split[2]+\" \"+rem_per+\"%)\"});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(cellContent<Val)\n\t\t\t\t\t\t\t\t\t$(cell).css({\"background\":\" -webkit-linear-gradient(left, \"+colors_split[0]+\" \"+percent+\"%, \"+Clr_split[0]+\" \"+rem_per+\"%)\"});\n\t\t\t\t\t\t\t\telse if(cellContent==Val)\n\t\t\t\t\t\t\t\t\t$(cell).css({\"background\":\" -webkit-linear-gradient(left, \"+colors_split[1]+\" \"+percent+\"%, \"+Clr_split[1]+\" \"+rem_per+\"%)\"});\n\t\t\t\t\t\t\t\telse if(cellContent>Val)\n\t\t\t\t\t\t\t\t\t$(cell).css({\"background\":\" -webkit-linear-gradient(left, \"+colors_split[2]+\" \"+percent+\"%, \"+Clr_split[2]+\" \"+rem_per+\"%)\"});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//if the icons to be applied are arrows, then this code \n\t\t\t\t\t\t\tif(Img==\"Arrows\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar str=\"\"+Val+\"\";\n\t\t\t\t\t\t\t\t//if value specifed by user is a range, then this code\n\t\t\t\t\t\t\t\tif(str.indexOf(\"-\") !== \"-1\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar Val_split=str.split(\"-\");\n\t\t\t\t\t\t\t\t\tif(cellContent<Val_split[0])\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-arrow-down col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:red;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent>=Val_split[0] && cellContent<=Val_split[1])\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-arrow-right col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:orange;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent>Val_split[1])\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-arrow-up col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:yellow;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(cellContent<Val)\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-arrow-down col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:red;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent==Val)\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-arrow-right col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:orange;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent>Val)\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-arrow-up col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:yellow;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(Img==\"Circles\")\t\t//if circles are to be applied as icons, then this code\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar str=\"\"+Val+\"\";\n\t\t\t\t\t\t\t\t//if value specifed by user is a range, then this code\n\t\t\t\t\t\t\t\tif(str.indexOf(\"-\")!=\"-1\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar Val_split=str.split(\"-\");\n\t\t\t\t\t\t\t\t\tif(cellContent<Val_split[0])\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-circle col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:red;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent>=Val_split[0] && cellContent<=Val_split[1])\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-circle col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:orange;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent>Val_split[1])\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-circle col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:yellow;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(cellContent<Val)\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-circle col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:red;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent==Val)\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-circle col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:orange;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent>Val)\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-circle col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:yellow;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//Code for applying date time formatting\n\t\t\t\t\t\t\tvar originalDate=cell.innerText;\n\t\t\t\t\t\t\tvar modifiedDate=originalDate.replace(/ |:|-|\\.|\\//g, \",\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tparseDate = d3.time.format(originalFormatValue[k]).parse;\n\t\t\t\t\t\t\tif(modifiedFormatValue[k]!=\"\"){\n\t\t\t\t\t\t\t\tformatDate = d3.time.format(modifiedFormatValue[k]);\n\t\t\t\t\t\t\t\tcell.innerText=formatDate(parseDate(modifiedDate));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t\n\t\t\t\n\t\t\tif(!hi_container.isSet(\"postExecution\")){\n\t\t\t\thi_container.set(\"postExecution\", ftnObj['RenderTableFormat'+id]);\n\t\t\t}\t\n\t\t\telse{\n\t\t\t\thi_container.extend(\"postExecution\", ftnObj['RenderTableFormat'+id]);\n\t\t\t}\n\t\t\t\n\t\t\n\t"},{"name":"Cache Refresh","scriptId":"generic_js_CacheRefresh","scriptType":"js","group":"Generic","parameters":{"refreshConfig":{"isEnable":true,"hours":1,"minutes":0,"seconds":0}},"renderOn":"simpleModel","isEditable":true,"description":"Refresh Cache on TimeOut","icon":"/images/scriptIcons/cache_refresh.png","isSelected":true,"isActiveScript":"active","isCheckedForMultipleEdit":false}]},"scripts":[],"styles":"","customStyles":"","customScripts":["\n\t\t\n\t\t\n\t\t\tvar id = hi_container.get(\"renderId\");\n\t\t\t\n\t\t\tvar containerId = \"#main\";\n\n\t\t\tif(id != \"\")\n\t\t\t\tcontainerId = containerId+'-'+id;\n\t\t\t\n\t\t\tvar tableName = containerId+' .table';\n\t\t\tvar thTable = containerId+' .table thead th>a>span';\n\t\t\tvar tdTable = containerId+' .table tbody tr>td';\n\t\t\tvar thead = containerId+' .table thead';\n\t\t\tvar tbody = containerId+' .table tbody';\n\t\t\tvar tableViz = containerId+' .table-viz';\n\t\t\tvar tableThead = containerId+' .table thead th';\n\t\t\tvar tableTbody = containerId+' .table tbody tr';\n\t\t\tvar tbodyEven = containerId+' .table tbody tr td:nth-child(even)';\n\t\t\tvar tbodyOdd = containerId+' .table tbody tr td:nth-child(odd)';\n\t\t\tvar theadEven = containerId+' .table thead tr th:nth-child(even)';\n\t\t\tvar theadEvenSpan = containerId+' .table thead tr th:nth-child(even)>a>span';\n\t\t\tvar theadOdd = containerId+' .table thead tr th:nth-child(odd)';\n\t\t\tvar theadOddSpan = containerId+' .table thead tr th:nth-child(odd)>a>span';\n\t\t\t\n\t\t\tvar ftnObj = {};\n\t\t\t\n\t\t\tftnObj['RenderTableFormat'+id]= function(){\n\t\t\t\n\t\t\t\t//loading d3.js thousand separator and date time formatting\n\t\t\t\tvar script1 = document.createElement(\"script\"),\n\t\t\t\t\t\tscript1loaded = false;\n\t\t\t\t\t\t\n\t\t\t\tif(window.DashboardGlobals)\n\t\t\t\t\tscript1.src= window.DashboardGlobals.baseUrl+\"/js/vendors/d3.js\";\n\t\t\t\telse\n\t\t\t\t\tscript1.src= \"/js/vendors/d3.js\"; \n\t\t\t\t   \n\t\t\t\tscript1.async = true;\n\n\t\t\t\tdocument.getElementsByTagName(\"head\")[0].appendChild(script1);\n\n\t\t\t\tscript1.onload = function() {\n\t\t\t\t\tvar table = document.querySelectorAll(tableViz);\n\t\t\t\t\t[].forEach.call(table, NumberFormat);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfunction NumberFormat(table) {\n\t\t\t\t//Taking all parameters in variables\n\t\t\t\tvar column_index=[],\n\t\t\t\t\tcolumn_name=[\"Cost of Travel\",\"Month Name\",\"Mode of Payment\",\"No of Travel\"],\n\t\t\t\t\ttableStyleNo='FirstRow_1',\n\t\t\t\t\tbasicProperties=[\"#ffffff\",\"#000000\",\"#ffffff\",\"#70ad47\",\"11\",\"Arial\"],\n\t\t\t\t\tswitch1=false,\n\t\t\t\t\tfontSizeValue=[\"11\",\"11\",\"11\",\"11\"],\n\t\t\t\t\tfontFamilyValue=[\"Arial\",\"Arial\",\"Arial\",\"Arial\"],\n\t\t\t\t\ttextColorValue=[\"Black\",\"Black\",\"Black\",\"Black\"],\n\t\t\t\t\tbackgroundColorValue={\"background\":[{\"column\":\"Cost of Travel\",\"max_val\":1035306,\"value\":321442,\"color\":\"\",\"image\":\"\",\"databar\":\"\"},{\"column\":\"Month Name\",\"max_val\":\"\",\"value\":0,\"color\":\"\",\"image\":\"\",\"databar\":\"\"},{\"column\":\"Mode of Payment\",\"max_val\":\"\",\"value\":0,\"color\":\"\",\"image\":\"\",\"databar\":\"\"},{\"column\":\"No of Travel\",\"max_val\":47,\"value\":21,\"color\":\"\",\"image\":\"\",\"databar\":\"\"}]},\n\t\t\t\t\tboldValue=[\"normal\",\"normal\",\"normal\",\"normal\"],\n\t\t\t\t\titalicValue=[\"normal\",\"normal\",\"normal\",\"normal\"],\n\t\t\t\t\tunderlineValue=[\"normal\",\"normal\",\"normal\",\"normal\"],\n\t\t\t\t\ttextAlignValue=[\"right\",\"left\",\"left\",\"right\"],\n\t\t\t\t\tPreffixes=[\"\",\"\",\"\",\"\"],\n\t\t\t\t\tSuffixes=[\"\",\"\",\"\",\"\"],\n\t\t\t\t\tthousandSeparatorFlag=[\"false\",\"false\",\"false\",\"false\"],\n\t\t\t\t\tnullValue=[\"NULL\",\"NULL\",\"NULL\",\"NULL\"],\n\t\t\t\t\tdateTimeFormatFlag=[\"false\",\"false\",\"false\",\"false\"],\n\t\t\t\t\toriginalFormatValue=[\"\",\"\",\"\",\"\"],\n\t\t\t\t\tmodifiedFormatValue=[\"\",\"\",\"\",\"\"];\n\t\t\t\t//var defaultFormatValue=\"%Y,%m,%d,%H,%M,%S,%L\";\t\t\n\n\t\t\t\t//Applying table layout properties to table according to the layout selected\n\t\t\t\t$(tableName).removeClass('table-striped');\n\t\t\t\t\n\t\t\t\tif(!false){\n\t\t\t\t\t$(thTable).css({\"font-size\":basicProperties[4]+'px',\"font-family\":basicProperties[5]});\n\t\t\t\t\t$(tableThead).css({\"font-size\":basicProperties[4]+'px',\"font-family\":basicProperties[5]});\n\t\t\t\t\t$(tdTable).css({\"font-size\":basicProperties[4]+'px',\"font-family\":basicProperties[5]});\n\t\t\t\t\tsetBasicColors();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//$(tableName).css({\"font-size\":basicProperties[4],\"font-family\":basicProperties[5]});\n\t\t\t\t\n\t\t\t\tfunction setBasicColors(){\n\t\t\t\t\tvar tableStyle=tableStyleNo.split(\"_\")[0];\n\t\t\t\t\tif(tableStyle==\"Default\" || tableStyle==\"TableStyle0\") {\n\t\t\t\t\t\t$(thTable).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t$(tableThead).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t$(thead).css(\"background-color\",basicProperties[1]);\n\t\t\t\t\t\t$(tdTable).css({\"color\":basicProperties[2]});\n\t\t\t\t\t\t$(tbody).css(\"background-color\", basicProperties[3]);\n\t\t\t\t\t} else if(tableStyle==\"FirstRow\") {\n\t\t\t\t\t\t$(thTable).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t$(tableThead).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t$(thead).css(\"background-color\",basicProperties[1]);\n\t\t\t\t\t\t$(tdTable).css({\"color\":basicProperties[2]});\n\t\t\t\t\t\t$(tbody).css(\"background-color\", basicProperties[3]);\n\n\t\t\t\t\t\t$(tableThead).hover(function(){\n\t\t\t\t\t\t\t\tvar cells=$(this).context.childNodes[0].childNodes[0];\n\t\t\t\t\t\t\t\t$(cells).css({\"color\":\"#000000\"});\n\t\t\t\t\t\t\t}, function(){\n\t\t\t\t\t\t\t\tvar cells=$(this).context.childNodes[0].childNodes[0];\n\t\t\t\t\t\t\t\t$(cells).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t$(tableTbody).hover(function(){\n\t\t\t\t\t\t\t\tvar cells=$(this).context.childNodes;\n\t\t\t\t\t\t\t\t$(cells).css({\"color\":\"#000000\"});\n\t\t\t\t\t\t\t}, function(){\n\t\t\t\t\t\t\t\tvar cells=$(this).context.childNodes;\n\t\t\t\t\t\t\t\t$(cells).css({\"color\":basicProperties[2]});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else if(tableStyle==\"FirstColumn\") {\n\t\t\t\t\t\t$(thead+' tr th:not(:nth-child(1))>a>span').css({\"color\":basicProperties[2]});\n\t\t\t\t\t\t$(thead+' tr th:not(:nth-child(1))').css({\"background-color\":basicProperties[3]});\n\t\t\t\t\t\t$(tbody+' tr td:not(:nth-child(1))').css({\"background-color\":basicProperties[3],\"color\":basicProperties[2]});\n\t\t\t\t\t\t$(thead+' tr th:nth-child(1)>a>span').css({color:basicProperties[0]});\n\t\t\t\t\t\t$(thead+' tr th:nth-child(1)').css({'background':basicProperties[1]});\n\t\t\t\t\t\t$(tbody+' tr td:nth-child(1)').css({'background': basicProperties[1],\"color\":basicProperties[0]});\n\t\t\t\t\t} else if(tableStyle==\"BandedColumn\") {\n\t\t\t\t\t\t$(theadEvenSpan).css({color:basicProperties[0]});\n\t\t\t\t\t\t$(theadEven).css({color:basicProperties[0]});\n\t\t\t\t\t\t$(theadOddSpan).css({color:basicProperties[2]});\n\t\t\t\t\t\t$(theadOdd).css({color:basicProperties[2]});\n\t\t\t\t\t\t$(theadEven).css({'background': basicProperties[1]});\n\t\t\t\t\t\t$(theadOdd).css({'background': basicProperties[3]});\n\t\t\t\t\t\t$(tbodyEven).css({color:basicProperties[0],'background': basicProperties[1]});\n\t\t\t\t\t\t$(tbodyOdd).css({color:basicProperties[2],'background': basicProperties[3]});\n\t\t\t\t\t} else if(tableStyle==\"FirstRowFirstColumn\") {\n\t\t\t\t\t\t$(thTable).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t$(tableThead).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t$(thead).css(\"background-color\",basicProperties[1]);\n\t\t\t\t\t\t$(tbody+' tr td:not(:nth-child(1))').css({\"background-color\":basicProperties[3],\"color\":basicProperties[2]});\n\t\t\t\t\t\t$(tbody+' tr td:nth-child(1)').css({'background': basicProperties[1],\"color\":basicProperties[0]});\n\t\t\t\t\t\t\n\t\t\t\t\t\t$(tableThead).hover(function(){\n\t\t\t\t\t\t\tvar cells=$(this).context.childNodes[0].childNodes[0];\n\t\t\t\t\t\t\t$(cells).css({\"color\":\"#000000\"});\n\t\t\t\t\t\t}, function(){\n\t\t\t\t\t\t\tvar cells=$(this).context.childNodes[0].childNodes[0];\n\t\t\t\t\t\t\t$(cells).css({\"color\":basicProperties[0]});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/**************************End of basic**************************************/\n\t\t\t\t\n\t\t\t\tsetBasicColors();\n\t\t\t\t\n\t\t\t\t$(thTable).css({\"margin-right\":\"0px\"});\n\t\t\t\t\t\n\t\t\t\t//Now accessing each cell of the table to apply the properties to each cell indvidually\t\n\t\t\t\t[].forEach.call(table.rows, function(row, i){\n\t\t\t\t\t//Collecting the column indexes of each column in the table\n\t\t\t\t\tjQuery.each(row.cells, function() {\n\t\t\t\t\t\tfor(var j=0;j<column_name.length;j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(i == 0 && this.textContent == column_name[j])\n\t\t\t\t\t\t\t\tcolumn_index.push(this.cellIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t//Accessing each cell and giving it the alignment property, which is compulsory\n\t\t\t\t\tfor(k=0;k<column_index.length;k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = row.cells[column_index[k]];\n\t\t\t\t\t\tif(cell.nodeName != 'TH')\n\t\t\t\t\t\t\t$(cell).css({\"text-align\":textAlignValue[k]});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Now check if the cell is not one of the header cells of the table\n\t\t\t\t\tif(i != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t//For each column, apply the properties\n\t\t\t\t\t\tfor(k=0;k<column_index.length;k++)\n\t\t\t\t\t\t{\t\t\n\t\t\t\t\t\t\t//If the preffix or suffix array contains dollar, then replace it by '$' symbol as the symbol is not working in the parameters\n\t\t\t\t\t\t\tif(Preffixes[k]==\"Dollar\")\t\t\t\t//Advanced Number Formatting\n\t\t\t\t\t\t\t\tPreffixes[k]=\"$\";\n\t\t\t\t\t\t\tif(Suffixes[k]==\"Dollar\")\n\t\t\t\t\t\t\t\tSuffixes[k]=\"$\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Code for accessing each cell\n\t\t\t\t\t\t\tvar cell = row.cells[column_index[k]];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Getting the original content of the cell (as it may change afterwards)\n\t\t\t\t\t\t\tvar cellContent=parseInt(cell.textContent);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//If thousand flag is enabled for a particulat column, then only apply thousand separator for that column\n\t\t\t\t\t\t\tif(thousandSeparatorFlag[k]==\"true\"){\n\t\t\t\t\t\t\t\tvar cellText=cellContent;\n\t\t\t\t\t\t\t\tcell.textContent=d3.format(\",\")(cellText);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Apply preffix and suffix\n\t\t\t\t\t\t\tvar number=cell.textContent;\n\t\t\t\t\t\t\tcell.innerHTML=Preffixes[k]+number+Suffixes[k];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Handle the null values in the table\n\t\t\t\t\t\t\tif(cellContent==\"Null\" || cellContent==\"null\")\n\t\t\t\t\t\t\t\tcell.textContent=nullValue[k];\n\t\t\t\t\n\t\t\t\t\t\t\t//Apply the basic properties to the cells, as enabled by user\n\t\t\t\t\t\t\t$(cell).css({\"font-size\":fontSizeValue[k]+'px',\"font-weight\":boldValue[k],\"font-style\":italicValue[k],\"text-decoration\":underlineValue[k],\"font-family\":fontFamilyValue[k]});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//get the values of different comparison parameters in variables\n\t\t\t\t\t\t\tvar Val=backgroundColorValue.background[k].value;\n\t\t\t\t\t\t\tvar Clr=backgroundColorValue.background[k].color;\n\t\t\t\t\t\t\tvar Img=backgroundColorValue.background[k].image;\n\t\t\t\t\t\t\tvar Max=backgroundColorValue.background[k].max_val;\n\t\t\t\t\t\t\tvar BarClr=backgroundColorValue.background[k].databar;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//calculate the percentage for the purpose of applying databars\n\t\t\t\t\t\t\tvar percent=(cellContent*100)/Max;\n\t\t\t\t\t\t\tvar rem_per=100-percent;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//As the databars and background-color have same style to be accessed i.e. \"background\", adjusted both databars and background-color\n\t\t\t\t\t\t\tif(Clr!=\"\" && BarClr==\"\")\n\t\t\t\t\t\t\t\tBarClr=Clr;\n\t\t\t\t\t\t\telse if(Clr==\"\" && BarClr!=\"\")\n\t\t\t\t\t\t\t\tClr=\"transparent-transparent-transparent\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar colors_split=BarClr.split(\"-\");\n\t\t\t\t\t\t\tvar Clr_split=Clr.split(\"-\");\n\t\t\t\t\t\t\tvar str=\"\"+Val+\"\";\n\t\t\t\t\t\t\t//if value specifed by user is a range, then this code\n\t\t\t\t\t\t\tif(str.indexOf(\"-\")!=\"-1\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar Val_split=str.split(\"-\");\n\t\t\t\t\t\t\t\tif(cellContent<Val_split[0])\n\t\t\t\t\t\t\t\t\t$(cell).css({\"background\":\" -webkit-linear-gradient(left, \"+colors_split[0]+\" \"+percent+\"%, \"+Clr_split[0]+\" \"+rem_per+\"%)\"});\n\t\t\t\t\t\t\t\telse if(cellContent>=Val_split[0] && cellContent<=Val_split[1])\n\t\t\t\t\t\t\t\t\t$(cell).css({\"background\":\" -webkit-linear-gradient(left, \"+colors_split[1]+\" \"+percent+\"%, \"+Clr_split[1]+\" \"+rem_per+\"%)\"});\n\t\t\t\t\t\t\t\telse if(cellContent>Val_split[1])\n\t\t\t\t\t\t\t\t\t$(cell).css({\"background\":\" -webkit-linear-gradient(left, \"+colors_split[2]+\" \"+percent+\"%, \"+Clr_split[2]+\" \"+rem_per+\"%)\"});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(cellContent<Val)\n\t\t\t\t\t\t\t\t\t$(cell).css({\"background\":\" -webkit-linear-gradient(left, \"+colors_split[0]+\" \"+percent+\"%, \"+Clr_split[0]+\" \"+rem_per+\"%)\"});\n\t\t\t\t\t\t\t\telse if(cellContent==Val)\n\t\t\t\t\t\t\t\t\t$(cell).css({\"background\":\" -webkit-linear-gradient(left, \"+colors_split[1]+\" \"+percent+\"%, \"+Clr_split[1]+\" \"+rem_per+\"%)\"});\n\t\t\t\t\t\t\t\telse if(cellContent>Val)\n\t\t\t\t\t\t\t\t\t$(cell).css({\"background\":\" -webkit-linear-gradient(left, \"+colors_split[2]+\" \"+percent+\"%, \"+Clr_split[2]+\" \"+rem_per+\"%)\"});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//if the icons to be applied are arrows, then this code \n\t\t\t\t\t\t\tif(Img==\"Arrows\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar str=\"\"+Val+\"\";\n\t\t\t\t\t\t\t\t//if value specifed by user is a range, then this code\n\t\t\t\t\t\t\t\tif(str.indexOf(\"-\") !== \"-1\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar Val_split=str.split(\"-\");\n\t\t\t\t\t\t\t\t\tif(cellContent<Val_split[0])\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-arrow-down col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:red;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent>=Val_split[0] && cellContent<=Val_split[1])\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-arrow-right col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:orange;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent>Val_split[1])\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-arrow-up col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:yellow;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(cellContent<Val)\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-arrow-down col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:red;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent==Val)\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-arrow-right col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:orange;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent>Val)\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-arrow-up col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:yellow;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(Img==\"Circles\")\t\t//if circles are to be applied as icons, then this code\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar str=\"\"+Val+\"\";\n\t\t\t\t\t\t\t\t//if value specifed by user is a range, then this code\n\t\t\t\t\t\t\t\tif(str.indexOf(\"-\")!=\"-1\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar Val_split=str.split(\"-\");\n\t\t\t\t\t\t\t\t\tif(cellContent<Val_split[0])\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-circle col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:red;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent>=Val_split[0] && cellContent<=Val_split[1])\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-circle col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:orange;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent>Val_split[1])\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-circle col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:yellow;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(cellContent<Val)\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-circle col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:red;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent==Val)\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-circle col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:orange;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t\telse if(cellContent>Val)\n\t\t\t\t\t\t\t\t\t\t$(cell).prepend('<i class=\"fa fa-circle col-sm-1\" aria-hidden=\"true\" style=\"padding-left:0px;padding-right:0px;color:yellow;float:left;\"><\/i>');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//Code for applying date time formatting\n\t\t\t\t\t\t\tvar originalDate=cell.innerText;\n\t\t\t\t\t\t\tvar modifiedDate=originalDate.replace(/ |:|-|\\.|\\//g, \",\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tparseDate = d3.time.format(originalFormatValue[k]).parse;\n\t\t\t\t\t\t\tif(modifiedFormatValue[k]!=\"\"){\n\t\t\t\t\t\t\t\tformatDate = d3.time.format(modifiedFormatValue[k]);\n\t\t\t\t\t\t\t\tcell.innerText=formatDate(parseDate(modifiedDate));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t\n\t\t\t\n\t\t\tif(!hi_container.isSet(\"postExecution\")){\n\t\t\t\thi_container.set(\"postExecution\", ftnObj['RenderTableFormat'+id]);\n\t\t\t}\t\n\t\t\telse{\n\t\t\t\thi_container.extend(\"postExecution\", ftnObj['RenderTableFormat'+id]);\n\t\t\t}\n\t\t\t\n\t\t\n\t",null]}]]></state>
    <security>
        <createdBy>1</createdBy>
        <organization></organization>
    </security>
</report>
